name: Deploy Infrastructure

on:
  push:
    branches:
      - master
    paths:
      - scripts/terraform/**
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        working-directory: scripts/terraform

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" \
            -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" \
            -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" \
            -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" \
            -var="kubernetes_version=1.30.3"
        working-directory: scripts/terraform

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" \
            -var="client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" \
            -var="client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" \
            -var="tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" \
            -var="kubernetes_version=1.30.3"
        working-directory: scripts/terraform

      - name: Verify Terraform State
        run: terraform show
        working-directory: scripts/terraform

      - name: Get AKS Credentials
        if: steps.terraform_output.outputs.RESOURCE_GROUP != '' && steps.terraform_output.outputs.AKS_NAME != ''
        run: |
          az aks get-credentials --resource-group ${{ steps.terraform_output.outputs.RESOURCE_GROUP }} --name ${{ steps.terraform_output.outputs.AKS_NAME }} --overwrite-existing
          kubectl config view --raw > kubeconfig
          echo "KUBE_CONFIG=$(base64 -w 0 kubeconfig)" >> $GITHUB_ENV

      - name: Debug Outputs
        run: |
          echo "Resource Group: ${{ steps.terraform_output.outputs.RESOURCE_GROUP }}"
          echo "AKS Cluster Name: ${{ steps.terraform_output.outputs.AKS_NAME }}"
          echo "Container Registry: ${{ steps.terraform_output.outputs.CONTAINER_REGISTRY }}"
          echo "Registry Username: ${{ steps.terraform_output.outputs.REGISTRY_UN }}"
          echo "Kubeconfig is set: ${{ steps.terraform_output.outputs.KUBE_CONFIG != '' }}"